<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/SVG/DTD/svg10.dtd">
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" onload="doLoad()">

  <script language="application/x-javascript">
<![CDATA[
var shapes = {};

var throbScale = 0.15;
var throbLevels = 10;
var clickScale = 0.9;
var clickerMaxSize = 50;
// clickerOverflow is the number of levels to fade in from zero alpha
var clickerOverflow = 10;
var clickerSizeAndOverflow = clickerMaxSize + clickerOverflow;

function doLoad() {
    shapes["square"] = document.getElementById("square");
    shapes["triangle"] = document.getElementById("triangle");
    shapes["circle"] = document.getElementById("circle");
}

function doMouseOver(event) {
    var target = event.target;
    var shape = target.parentNode;

    if (!shape.throb) {
        shape.throb = true;
        if (!shape.throbbing) {
            shape.throbbing = true;
            shape.throbData = { val: 0, inc : 1};
        }
        startDrawTimer();
    }
}

function doMouseOut(event) {
    var target = event.target;
    var shape = target.parentNode;

    shape.throb = false;
}

function doMouseDown(event) {
    var target = event.target;
    var shape = target.parentNode;

    if (!shape.clicked) {
        var vstart = 0;
        if (shape.throbbing && shape.throbData)
            vstart = shape.throbData.val;
        shape.throbbing = false;
        shape.throb = false;
        shape.clicked = true;
        shape.clickData = { val: vstart };
        startDrawTimer();
    }
}

var drawingActiveTimeout = 0;
var timer_active = false;
function startDrawTimer() {
    if (timer_active)
        return;

    timer_active = true;
    setTimeout (drawTimer, drawingActiveTimeout);
}

function drawTimer() {
    var stillActive = false;

    for (var shapeName in shapes) {
        var shape = shapes[shapeName];

        if (shape.clicked) {
            do_clicker(shape);
            stillActive = true;
        } else if (shape.throbbing) {
            do_throbber(shape);
            stillActive = true;
        }
    }

    if (stillActive)
        setTimeout(drawTimer, drawingActiveTimeout);
    else
        timer_active = false;
}

function do_throbber(shape) {
    var tdata = shape.throbData;

    // if we're to stop throbbing and we finished a cycle, we're done here
    if (!shape.throb && tdata.val == 0) {
        shape.removeAttribute("transform");
	shape.throbbing = false;
        return;
    }

    tdata.val += tdata.inc;
    if (tdata.val > throbLevels) {
        tdata.val = throbLevels - 1;
        tdata.inc = -1;
    } else if (tdata.val < 0) {
        tdata.val = 1;
        tdata.inc = 1;
    }

    var scale = 1 + throbScale * (tdata.val / throbLevels);

    shape.setAttribute("transform", "scale(" + scale + ")");
}

function do_clicker(shape) {
    var cdata = shape.clickData;

    cdata.val += 1;

    if (cdata.val > clickerSizeAndOverflow) {
        shape.removeAttribute("transform");
        shape.removeAttribute("opacity");
        shape.clicked = false;
        return;
    }

    var scale = 1;
    var a = 1.0;

    if (cdata.val <= clickerMaxSize) {
        scale = 1 + clickScale * (cdata.val/10);
        a = (clickerMaxSize - cdata.val) / clickerMaxSize;
    } else {
        scale = 1;
        a = (cdata.val - clickerMaxSize) / clickerOverflow;
    }

    shape.setAttribute("transform", "scale(" + scale + ")");
    //shape.setAttribute("opacity", a);
}
  ]]></script>

  <defs>
    <clipPath id="clip">
      <rect x="0" y="0" width="400" height="200"/>
    </clipPath>
  </defs>

  <rect stroke="red" fill="none" x="0" y="0" width="399" height="199"/>
  <g clip-path="url(#clip)">
    <g transform="translate(200,100)">
      <g transform="translate(-82,0)">
	<rect id="square" fill="red" x="-40" y="-40" width="80" height="80" onmousedown="doMouseDown(evt)" onmouseover="doMouseOver(evt)" onmouseout="doMouseOut(evt)"/>
      </g>
    <g transform="translate(82,0)">
	<circle id="circle" fill="blue" cx="0" cy="0" r="40" onmousedown="doMouseDown(evt)" onmouseover="doMouseOver(evt)" onmouseout="doMouseOut(evt)"/>

      </g>
      <g transform="translate(0,0)">
	<polygon id="triangle" fill="green" points="-40,40 0,-40 40,40" onmousedown="doMouseDown(evt)" onmouseover="doMouseOver(evt)" onmouseout="doMouseOut(evt)"/>
      </g>
    </g>
  </g>
</svg>
